// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                    @id @default(autoincrement())
  email              String                 @unique
  firstname          String?
  lastname           String?
  password           String?
  firstTimeLogin     Boolean                @default(true)
  pii                personal_id?
  transactionParties UserTransactionParty[]
  user_tp_request    user_tp_request[]
  userApplications  UserApplication[]
}

model TransactionParty {
  id              Int                    @id @default(autoincrement())
  name            String
  email           String
  password        String
  firstTimeLogin  Boolean                @default(true)
  users           UserTransactionParty[]
  user_tp_request user_tp_request[]
  application     application[]
}

model UserTransactionParty {
  userId             Int
  user               User             @relation(fields: [userId], references: [id])
  transactionPartyId Int
  transactionParty   TransactionParty @relation(fields: [transactionPartyId], references: [id])

  @@id([userId, transactionPartyId])
}

model personal_id {
  id                Int         @id @default(autoincrement())
  user_id           Int         @unique
  user              User        @relation(fields: [user_id], references: [id])
  basicPII          basic_pii?  @relation(fields: [basic_piiUser_id], references: [user_id])
  secretPII         secret_pii? @relation(fields: [secret_piiUser_id], references: [user_id])
  basic_piiUser_id  Int?
  secret_piiUser_id Int?
}

model basic_pii {
  user_id     Int           @id
  firstname   String?
  lastname    String?
  email       String?
  personal_id personal_id[]
  secret_pii  secret_pii[]
}

model secret_pii {
  user_id           Int           @id
  dateOfBirth       String?
  homeAddress       String?
  country           String?
  occupation        String?
  phoneNumber       String?
  basic_pii_User_id Int
  basic_pii         basic_pii?    @relation(fields: [basic_pii_User_id], references: [user_id])
  personal_id       personal_id[]
}

model user_tp_request {
  id                 Int              @id @default(autoincrement())
  user_id            Int
  user               User             @relation(fields: [user_id], references: [id])
  transactionPartyId Int
  transactionParty   TransactionParty @relation(fields: [transactionPartyId], references: [id])
  status             String           @default("pending")
  activity           String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
}

model application {
  id               Int              @id @default(autoincrement())
  name             String
  website_url      String
  logo_url         String
  createdBy        Int
  transactionParty TransactionParty @relation(fields: [createdBy], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  data_access      String[]
  secret_key       String
  public_key       String
  userApplications  UserApplication[]
}

model UserApplication {
  id              Int          @id @default(autoincrement())
  userId          Int
  applicationId   Int
  user            User         @relation(fields: [userId], references: [id])
  application     application  @relation(fields: [applicationId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
}